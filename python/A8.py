#!/usr/bin/env python

"""
Problem 8
11 January 2002

Find the greatest product of five consecutive digits in the 1000-digit number.
"""

import operator

def naive(n, d):
    """Compute the largest product of consecutive digits by computation of each
    grouping of digits.

    >>> number = "\
73167176531330624919225119674426574742355349194934\
96983520312774506326239578318016984801869478851843\
85861560789112949495459501737958331952853208805511\
12540698747158523863050715693290963295227443043557\
66896648950445244523161731856403098711121722383113\
62229893423380308135336276614282806444486645238749\
30358907296290491560440772390713810515859307960866\
70172427121883998797908792274921901699720888093776\
65727333001053367881220235421809751254540594752243\
52584907711670556013604839586446706324415722155397\
53697817977846174064955149290862569321978468622482\
83972241375657056057490261407972968652414535100474\
82166370484403199890008895243450658541227588666881\
16427171479924442928230863465674813919123162824586\
17866458359124566529476545682848912883142607690042\
24219022671055626321111109370544217506941658960408\
07198403850962455444362981230987879927244284909188\
84580156166097919133875499200524063689912560717606\
05886116467109405077541002256983155200055935729725\
71636269561882670428252483600823257530420752963450"
    >>> naive(number, 1)
    9
    >>> naive(number, 5)
    40824
    >>> naive(number, 13)
    23514624000
    >>> naive(number, 42)
    7730627145264456007680000000L
    >>> naive(number, 100)
    0
    """

    largest = 0

    for idx in range(len(n) - d + 1):
        product = reduce(operator.mul, (int(i) for i in n[idx:idx+d]))
        largest = max(largest, product)

    return largest


def sliding_window(n, d):
    """Compute the product over a sliding window so that each computed product
    requires one multiplication and one division. Since zero cannot be divided
    process the digits in groups as separated by zeros.

    >>> number = "\
73167176531330624919225119674426574742355349194934\
96983520312774506326239578318016984801869478851843\
85861560789112949495459501737958331952853208805511\
12540698747158523863050715693290963295227443043557\
66896648950445244523161731856403098711121722383113\
62229893423380308135336276614282806444486645238749\
30358907296290491560440772390713810515859307960866\
70172427121883998797908792274921901699720888093776\
65727333001053367881220235421809751254540594752243\
52584907711670556013604839586446706324415722155397\
53697817977846174064955149290862569321978468622482\
83972241375657056057490261407972968652414535100474\
82166370484403199890008895243450658541227588666881\
16427171479924442928230863465674813919123162824586\
17866458359124566529476545682848912883142607690042\
24219022671055626321111109370544217506941658960408\
07198403850962455444362981230987879927244284909188\
84580156166097919133875499200524063689912560717606\
05886116467109405077541002256983155200055935729725\
71636269561882670428252483600823257530420752963450"
    >>> sliding_window(number, 1)
    9
    >>> sliding_window(number, 5)
    40824
    >>> sliding_window(number, 42)
    7730627145264456007680000000L
    >>> sliding_window(number, 42)
    7730627145264456007680000000L
    >>> sliding_window(number, 100)
    0
    """

    largest = 0

    for section in n.split('0'):
        if len(section) < d:
            continue

        digits = [int(i) for i in section]

        product = reduce(operator.mul, (i for i in digits[:d]))
        largest = max(largest, product)

        for x in range(len(digits) - d):
            product = product * digits[x+d] / digits[x]
            largest = max(largest, product)

    return largest


if __name__ == "__main__":
    import doctest
    doctest.testmod()
